import torch
from torchvision import datasets, transforms
from torch.utils.data import DataLoader
from PIL import Image
import torch.nn.functional as F


def to_rgb(image):
    # 将灰度图像转换为RGB模式
    image_rgb = image.convert('RGB')
    return image_rgb


# 定义图像转换
transform = transforms.Compose([
    transforms.Resize((64, 64)),
    transforms.Lambda(to_rgb),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.5, 0.5, 0.5], std=[0.5, 0.5, 0.5])
])


class ModelNet(torch.nn.Module):
    def __init__(self):
        super(ModelNet, self).__init__()
        self.conv1 = torch.nn.Conv2d(3, 10, 2)
        self.conv2 = torch.nn.Conv2d(10, 20, 2)
        self.pooling1 = torch.nn.MaxPool2d(2)
        self.conv3 = torch.nn.Conv2d(20, 40, 2)
        self.conv4 = torch.nn.Conv2d(40, 80, 2)
        self.pooling2 = torch.nn.MaxPool2d(2)
        self.conv5 = torch.nn.Conv2d(80, 120, 2)
        self.conv6 = torch.nn.Conv2d(120, 256, 2)
        self.pooling3 = torch.nn.MaxPool2d(2)
        self.fc1 = torch.nn.Linear(9216, 1280)
        self.fc3 = torch.nn.Linear(1280, 3)

    def forward(self, x):
        batch_size = x.size(0)
        x = F.relu(self.conv1(x))
        x = F.relu(self.conv2(x))
        x = self.pooling1(x)
        x = F.relu(self.conv3(x))
        x = F.relu(self.conv4(x))
        x = self.pooling2(x)
        x = F.relu(self.conv5(x))
        x = F.relu(self.conv6(x))
        x = self.pooling3(x)
        x = x.view(batch_size, -1)
        x = F.relu(self.fc1(x))
        x = self.fc3(x)
        return x


# 加载模型
model = ModelNet()
model.load_state_dict(torch.load('my_model.pt'))
model.eval()  # 设置为评估模式

# 定义预测函数
def predict(model, image_path):
    # 读取图像并应用转换
    image = Image.open(image_path).convert('RGB')
    image_tensor = transform(image).unsqueeze(0)  # 添加batch维度

    # 进行预测
    with torch.no_grad():  # 在评估模式下运行
        output = model(image_tensor)
        print(output)
        # 获取概率分布
        probs = F.softmax(output, dim=1)
        print(probs)
        # 获取最高概率的类别
        _, predicted = torch.max(probs, 1)
        print(predicted)
        return predicted.item()

# 图像路径
image_path = '屏幕截图 2024-03-09 174255.png'

# 进行预测
prediction = predict(model, image_path)

# 打印预测结果
if prediction == 0:
    print('cat')
elif prediction == 1:
    print("dog")
else:
    print("wild")
